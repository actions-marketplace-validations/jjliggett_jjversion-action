name: "jjversion-action"
description: "Creates a version for the repository using jjversion"
author: "jjliggett"
branding:
  icon: "tag"
  color: "blue"
inputs:
  skip-go-installation:
    description: "If set to true, then the action uses pre-installed Go"
    default: "false"
    required: false
outputs:
  major:
    description: "Major version"
    value: ${{ steps.jjversion.outputs.major }}
  minor:
    description: "Minor version" 
    value: ${{ steps.jjversion.outputs.minor }}
  patch:
    description: "Patch version"
    value: ${{ steps.jjversion.outputs.patch }}
  majorMinorPatch:
    description: "MajorMinorPatch version"
    value: ${{ steps.jjversion.outputs.majorMinorPatch }}
  sha:
    description: "Commit Sha"
    value: ${{ steps.jjversion.outputs.sha }}
  shortSha:
    description: "ShortSha"
    value: ${{ steps.jjversion.outputs.shortSha }}

runs:
  using: "composite"
  steps:
    - name: Setup Go unless skip-go-installation is true
      uses: ChristopherHX/conditional@3fce4b7a3171a839b482306f9fd3aba0c2112a24
      with:
        if: ${{ inputs.skip-go-installation == 'true' }}
        step: |
          uses: actions/setup-go@v2
    - run: go mod init local
      shell: pwsh
    - run: go get -v -d github.com/jjliggett/jjversion/src@e9c73badb89723d11bb85ad103fe9bfed46c7057
      shell: pwsh
    - run: |
        cd "$(go env GOPATH)/pkg/mod/github.com/jjliggett/jjversion"
        if ($env:RUNNER_OS -eq "Windows")
        {
          cd src*
          echo "Building jjversion"
          go build -o jjversion.exe
        } else {
          ls -al
          chmod +w src*
          ls -al
          cd src*
          echo "Building jjversion"
          go build -a -v -o jjversion
          cp jjversion $env:GITHUB_WORKSPACE/jjversion
        }
      shell: pwsh
    - run: |
        if ($env:RUNNER_OS -eq "Windows")
        {
          cp "$(go env GOPATH)/pkg/mod/github.com/jjliggett/jjversion/src*/jjversion.exe" .
        }
      shell: pwsh
    - run: printenv
      shell: pwsh
    - run: |
        if ($env:RUNNER_OS -eq "Windows")
        {
          ./jjversion.exe > jjversion-output.txt
        } else {
          ./jjversion > jjversion-output.txt
        }
      shell: pwsh
    - run: echo "::set-output name=version::$(cat jjversion-output.txt)"
      id: version
      shell: pwsh
    - run: cat jjversion-output.txt
      shell: pwsh
    - name: Parse version
      id: jjversion
      uses: jjliggett/jjversion-parsing-action@02eaeac93daa5bfd42a2d595c2ca3825ea486a94
      with:
        version: ${{ steps.version.outputs.version }}
    - name: Display version outputs
      run: |
        echo "Major: ${{ steps.jjversion.outputs.major }}"
        echo "Minor: ${{ steps.jjversion.outputs.minor }}"
        echo "Patch: ${{ steps.jjversion.outputs.patch }}"
        echo "MajorMinorPatch: ${{ steps.jjversion.outputs.majorMinorPatch }}"
        echo "Sha: ${{ steps.jjversion.outputs.sha }}"
        echo "ShortSha: ${{ steps.jjversion.outputs.shortSha }}"
      shell: pwsh
